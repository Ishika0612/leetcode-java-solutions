/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode findMid(ListNode head){
        ListNode slow=head;
        ListNode fast = head;

        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }

        return slow;
    }

    public ListNode reverse(ListNode head){
         if(head==null || head.next==null)
        return head;

        ListNode prev=null;
        ListNode curr=head;
        while(curr!=null){
            ListNode next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
        return head;
    }

    public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null)
        return true;

      ListNode mid = findMid(head);
     ListNode secHalf = reverse(mid);

    ListNode firstHalf = head;

    while(secHalf!=null){
        if(firstHalf.val!=secHalf.val)
        return false;

        firstHalf=firstHalf.next;
        secHalf=secHalf.next;
    }
        return true;
    }
}
